;+
; Project     : BBSO Active Region Monitor (ARM)
;
; Name        : arm_fd
;
; Purpose     : Generate a web page for each full-disk image
;
; Syntax      : arm_fd, date_struct, summary, map, wl = wl ...
;
; Inputs      : date_struct = ARM date structure
;               summary = output from ar_org.pro
;               issued = date NOAA data was issued
;               t_noaa = time NOAA region positions are valid
;
; Keywords    : wl = MDI continuum
;               eit195 = eit FeXII (19.5 nm)
;               eit284 = eit FeXV (28.4 nm)
;               mag = MDI magnetogram
;               halpha = BBSO or KSO full-disk H-alpha
;               sxi = NOAA GOES-12 SXI
;
;          error_status = fd creation status (so regions dont get run on unmade FDs)
;          error_type = type of image error occured on
;
; Example    : IDL> arm_fd, date_structure, summary, /wl
;
; Outputs     : halpha_fd.html, wl_fd.html, mag_fd.html, eit195_fd.html
;
;
; History     : Written 05-feb-2001, Peter Gallagher, BBSO
;          2004-07-12 Russ Hewett: updated path information, changed to png, added fits
;          2005-07-13 Russ Hewett: added status keyword
;   	   2005-08-23 James McAteer: changed to SXI level 2 data
;
; Contact     : ptg@bbso.njit.edu
;
;-

pro arm_fd, output_path, date_struct, summary, map_struct, $
            SEIT_00195 = seit_00195, SEIT_00284 = seit_00284, SMDI_IGRAM = smdi_igram, SMDI_MAGLC = smdi_maglc, $
         BBSO_HALPH = bbso_halph, GSXI = gsxi, GONG_MAGLC = gong_maglc, SEIT_00171 = seit_00171, $
         SEIT_00304 = seit_00304, TRCE_M0171 = trce_m0171, error_status = error_status, error_type = error_type


    ;set up error stuff (assume no error to begin with)
    error_type = ''
    error_status = 0


  utc       = date_struct.utc
  date      = date_struct.date
  prev_date = date_struct.prev_date
  next_date = date_struct.next_date

;  prev_rot  = time2file( anytim( anytim( utc ) - 27.*24.*60.*60. ), /date )
;  next_rot  = time2file( anytim( anytim( utc ) + 27.*24.*60.*60. ), /date )
;  prev_week = time2file( anytim( anytim( utc ) -  7.*24.*60.*60. ), /date )
;  next_week = time2file( anytim( anytim( utc ) +  7.*24.*60.*60. ), /date )

;  print, output_path

  set_plot, 'z'

  year = strmid( date, 0, 4 )

; SXI properties

  if ( keyword_set( gsxi ) ) then begin

    sxi = obj_new( 'sxi' )
    sxi -> latest, filename, /p_thn_b, /level2
    
    sxi_image = sxi -> getdata( )

    if ( size( sxi_image, /type ) ne 4 ) then begin
      map = dummy_map( )
      filename = ' '
    endif else begin
      sxi -> rotate, roll = 0
      map = sxi -> get( /map )
    endelse
    
    unscaled_map = map
    loadct, 3
    
    if ( min( map.data ) le 0.) then add_prop, map, data = map.data - min( map.data ) + 1., /replace 
    add_prop, map, data = bytscl( alog( map.data ) ), /replace
    
    add_prop, map, instrument = 'gsxi', /replace
    add_prop, map, wavelength = map.id, /replace

    instrument = 'gsxi'
    filter = 'flter'

  endif

; GONG+ properties

  if ( keyword_set( gong_maglc ) ) then begin
    
    get_gong, filename, err = err
    
    if ( err ne '' ) then begin
      
      map = dummy_map()
      dB_map = dummy_map()
      add_prop, dB_map, data = dB, /rep
      add_prop, dB_map, id = 'GONG+ Magnetic Field Gradient', /rep

    endif else begin

      data= readfits( filename, head )
      index = head2stc( head )

      ; Add border
      dum = fltarr( 1024, 1024 )
      dum[ *, * ] = average( data[ 0:100, 0:100 ] )
      dum[ 512 - 430: 511 + 430, 512 - 430: 511 + 430] = data
      data = dum
      sz = size( data, /dim )

      if ( max( data ) eq min( data ) ) then begin

        center = [ sz( 0 ) / 2., sz( 1 ) / 2. ]
        radius = 300.                   ; arbitrary choice

       endif else begin

        gong_limb, data, center, radius

      endelse

      ;The units in the GONG magnetogram file are m/s.  To convert to gauss,
      ;we must multiply by 0.352.
      ;index2map, index, bytscl( data*0.352, min = -250, max = 250 ), map
      index2map, index, data*0.352, map

      pang = pb0r( /arcsec )
      aradius = pang( 2 )
      arsecperpix = aradius / radius
      add_prop, map, xc = ( sz( 0 ) / 2. - center( 0 ) ) * arsecperpix , /replace
      add_prop, map, yc = ( sz( 1 ) / 2. - center( 1 ) ) * arsecperpix , /replace
      add_prop, map, dx = arsecperpix, dy = arsecperpix ,/replace
      add_prop, map, instrument = 'GONG+ (' + index.sitename + ')', /replace

      if ( max( map.data ) eq min( map.data ) ) then begin

        dB_map = map
        add_prop, dB_map, data = dB, /rep
        add_prop, dB_map, id = 'GONG+ Magnetic Field Gradient', /rep

      endif else begin

         gong_gradient, map, center, radius - 6, dB_map

      endelse

    endelse

    add_prop, map, wavelength = 'Magnetogram', /replace
    loadct, 0

    unscaled_map = map
    unscaled_dB_map = dB_map

    instrument = 'gong'
    filter = 'maglc'

  endif

; MDI continuum properties

  if ( keyword_set( smdi_igram ) ) then begin
    get_wl, date, filename           ; ftp in the most recent data

    if (filename eq 'err') then begin
        error_type = 'smdi_igram'

        ; do any other error handling stuff

        goto, error_handler
    endif

    mreadfits, filename, index, data
    mdi_calib, index, data, odata
    data = odata
    data = rot( data, index.crot )          ; Account for SOHO roll
    index2map, index, data, map

    unscaled_map = map

    add_prop, map, data = bytscl( map.data, min = 0, max = 15000 ), /replace
    add_prop, map, instrument = 'MDI', /replace               ; ID the data
    add_prop, map, wavelength = 'Continuum', /replace
    id = 'wl'
    dum = bytarr( 1024 + 400, 1024 + 400 )     ; Add 200 pixel border
    dum( 1424/2. - 512 : 1424/2. + 511, 1424/2. - 512 : 1424/2. + 511 )  = map.data
    add_prop, map, data = dum, /replace
    add_prop, map, time = index.date_d$obs + ' ' + index.time_d$obs, /replace
    loadct, 1
    gamma_ct, 0.8

    instrument = 'smdi'
    filter = 'igram'
  endif

; MDI magnetogram properties

  if ( keyword_set( smdi_maglc ) ) then begin
    get_mag, date, filename
    mreadfits, filename, index, data
    data = rot( data, index.crot )
    index2map, index, bytscl( data, min = -150, max = 150 ), map

    unscaled_map = map

    add_prop, map, instrument = 'MDI', /replace
    add_prop, map, wavelength = 'Magnetogram', /replace
    id = 'mag'
    dum = bytarr( 1024 + 400, 1024 + 400 )     ; Add 200 pixel border
    dum( 1424/2. - 512 : 1424/2. + 511, 1424/2. - 512 : 1424/2. + 511 )  = map.data
    add_prop, map, data = dum, /replace
    add_prop, map, time = index.date_d$obs + ' ' + index.time_d$obs, /replace
    loadct, 0, /silent

    instrument = 'smdi'
    filter = 'maglc'
  endif

; EIT Fe XII 195 properties

  if ( keyword_set( seit_00195 ) ) then begin
    eit = obj_new( 'eit' )
    eit -> latest, bandpass = 195
    map = eit -> get( /map )
    unscaled_map = map

    if ( is_struct( map ) ne 1 ) then begin
      map = dummy_map()
    endif else begin
      sz = size( map.data, /dim ) ; This corrects the ~factor 2 change in flux for 512x512 mode.
      if ( sz[ 0 ] eq 512 ) then begin
        add_prop, map, data = bytscl( map.data, min = 20, max = 12000 )^.3, /replace
      endif else begin
        ;add_prop, map, data = bytscl( map.data, min = 10, max = 3500 )^.3, /replace
        add_prop, map, data = bytscl( map.data, min = 5., max = 400. )^.2, /replace ; intensity calibration change from J. Newmark (8-Aug-2006)
      endelse
    endelse

    add_prop, map, instrument = 'EIT', /replace
    add_prop, map, wavelength = 'Fe XII (195 &Aring;)', /replace
    id = 'eit195'
    eit_colors, 195

    instrument = 'seit'
    filter = '00195'
  endif

; EIT FeXV 284 properties

  if ( keyword_set( seit_00284 ) ) then begin
    eit = obj_new( 'eit' )
    eit -> latest, bandpass = 284
    map = eit -> get( /map )
    unscaled_map = map

    if ( is_struct( map ) ne 1 ) then map = dummy_map()

    ;add_prop, map, data = bytscl( map.data, 1., 2500. )^.25, /replace
    add_prop, map, data = bytscl( map.data, 0.01, 25. )^.25, /replace  ; Changed scale 8-Aug-2006 - no idea why had to!        
    add_prop, map, instrument = 'EIT', /replace
    add_prop, map, wavelength = 'Fe XV (284 &Aring;)', /replace
    id = 'eit284'
    eit_colors, 284

    instrument = 'seit'
    filter = '00284'
  endif

; EIT FeIX/X 171 properties

  if ( keyword_set( seit_00171 ) ) then begin
    eit = obj_new( 'eit' )
    eit -> latest, bandpass = 171
    map = eit -> get( /map )
    unscaled_map = map

    if ( is_struct( map ) ne 1 ) then map = dummy_map()

    ;add_prop, map, data = bytscl( map.data, 10., 2700. )^.19, /replace
    add_prop, map, data = bytscl( map.data, 1., 900. )^.21, /replace
    add_prop, map, instrument = 'EIT', /replace
    add_prop, map, wavelength = 'Fe IX/X (171 &Aring;)', /replace
    id = 'eit171'
    eit_colors, 171

    instrument = 'seit'
    filter = '00171'
  endif

;EIT HeII 304 properties

  if ( keyword_set( seit_00304 ) ) then begin
    eit = obj_new( 'eit' )
    eit -> latest, bandpass = 304
    map = eit -> get( /map )
    unscaled_map = map

    if ( is_struct( map ) ne 1 ) then map = dummy_map()

    ;add_prop, map, data = bytscl(map.data,1,10000.)^.4, /replace
    add_prop, map, data = bytscl( map.data, 1., 300. )^.2, /replace
    add_prop, map, instrument = 'EIT', /replace
    add_prop, map, wavelength = 'He II (304 &Aring;)', /replace
    id = 'eit304'
    eit_colors, 304

    instrument = 'seit'
    filter = '00304'
  endif

; H-alpha properties

  if ( keyword_set( bbso_halph ) ) then begin
    get_halpha, date, filename, err = err

    if (err eq -1) then begin
       error_type = 'bbso_halph'

       ; do any other error handling stuff

       goto, error_handler
    endif

    mreadfits, filename, index, data

    if ( n_elements( data ) eq 0 ) then begin

      map = dummy_map()
      unscaled_map = map

    endif else begin

      index2map, index, data, map
      unscaled_map = map
      add_prop, map, instrument = get_tag_value( index, /ORIGIN ), /replace
      if ( map.instrument eq 'KANZELHOEHE' ) then add_prop, map, instrument = 'Kanzelhoehe', /replace

      ; Correct columns in BBSO frames
      bad_pixels = where( data gt 1e4 )
      if ( bad_pixels[ 0 ] ne -1 ) then begin
          data[ bad_pixels ] = average( data[ 0:10, 0:10 ] )
      add_prop, map, data = data, /replace
      endif

      if ( map.instrument eq 'Kanzelhoehe' ) then begin
        pang = pb0r( map.time )            ; Calculate the P-angle
        add_prop, map, data = rot( map.data, pang[ 0 ] ), /replace ; P-angle correct
      endif

      sz = size( map.data )
      dum = fltarr( 2500, 2500 )
      dum[ *, * ] = average( map.data[ 50:150, 50:150 ] )
      dum[ 1250 - ( sz[ 1 ] / 2 ) : 1250 + ( sz[ 1 ] / 2 ) - 1, $
           1250 - ( sz[ 2 ] / 2 ) : 1250 + ( sz[ 2 ] / 2 ) - 1 ] = map.data
      add_prop, map, data = dum, /replace

    endelse

    add_prop, map, wavelength = 'H-alpha', /replace
    id = 'halpha'
    loadct, 3, /silent

    instrument = 'bbso'
    filter = 'halph'
  endif

; TRACE Fe IX/X 171 properties

  if ( keyword_set( trce_m0171 ) ) then begin
    print, 'Getting TRACE Mosaic'
    get_trace_mosaic, map, status
    print, 'Status: ', status
    print, 'Got Mosaic'
    help,map,/str

    if ( n_elements( map.data ) eq 0 ) then map = dummy_map()
    ;if (status ne 0) then begin
       unscaled_map = map
    ;  if ( n_elements( map.data ) eq 0 ) then map = dummy_map()
       print, 'Doing prop stuff'
       add_prop, map, data = bytscl( map.data, 10., 2700. )^.3, /replace
       add_prop, map, instrument = 'TRACE', /replace
       add_prop, map, wavelength = 'Fe IX/X (171 &Aring;)', /replace
       id = 'eit171'
       eit_colors, 171

       instrument = 'trce'
       filter = 'm0171'
    ;endif
    print, 'done trace stuff'
  endif

; Plot the data

  device, set_resolution = [ 681, 681 ]
  !p.charsize = 0.6
  !p.color = 0
  !p.background = 255
  position = [ 0.07, 0.05, 0.99, 0.97 ]

  if ( keyword_set( sxt ) ) then begin
    !p.color = 255
    !p.background = 0
  endif

  center = [ 0., 0. ]
  fov = [ 2200. / 60., 2200. / 60. ]

  full_instrument = instrument + '_' + filter

  case full_instrument of

    'seit_00195':  plot_map, map, /square, fov = fov, grid = 10, $
               title = 'EIT Fe XII (195 ' + string( 197B ) + ') ' + map.time, $
           position = position, center = center, gcolor=255

    'seit_00284':  plot_map, map, /square, fov = fov, grid = 10, $
               title = 'EIT Fe XV (284 ' + string( 197B ) + ') ' + map.time, $
               position = position, center = center, gcolor=255

    'seit_00171':  plot_map, map, /square, fov = fov, grid = 10, $
               title = 'EIT Fe IX/X (171 ' + string( 197B ) + ') ' + map.time, $
           position = position, center = center, gcolor=255

    'seit_00304':  plot_map, map, /square, fov = fov, grid = 10, $
               title = 'EIT He II (304 ' + string( 197B ) + ') ' + map.time, $
           position = position, center = center, gcolor=255

    'gsxi_flter':  plot_map, map, /square, fov = fov, grid = 10, $
               title = map.wavelength + ' ' + map.time, $
           position = position, center = center, gcolor=255

    'gong_maglc'  :  plot_map, map, /square, fov = fov, grid = 10, $
               title = map.instrument + ' ' + map.wavelength + ' ' + map.time, $
           dmin = -250, dmax = 250, position = position, center = center, gcolor=255

    'trce_m0171':  plot_map, map, /square, fov = fov, grid = 10, $
               title = 'TRACE Fe IX/X (171 ' + string( 197B ) + ') ' + map.time, $
         position = position, center = center, gcolor=255


     else   :  plot_map, map, /square, fov = fov, grid = 10, $
               title = map.instrument + ' ' + map.wavelength + ' ' + map.time, $
           position = position, center = center, gcolor=255

  endcase

; Define region properties

  names  = reform( summary( 0, * ) )
  loc    = reform( summary( 1, * ) )
  type   = reform( summary( 2, * ) )
  z      = reform( summary( 3, * ) )
  area   = reform( summary( 4, * ) )
  nn     = reform( summary( 5, * ) )
  ll     = reform( summary( 6, * ) )
  events = reform( summary( 7, * ) )

  for i = 0, n_elements( events ) - 1 do begin

    if ( events( i ) eq '' ) then events( i ) = '-'

  endfor

; Rotate lat and lng of summary data and rotate to time of image map and overplot

  dum = rot_locations( loc, utc, map.time, solar_xy = solar_xy )

  for i = 0, n_elements( names ) - 1 do begin

    if (strlowcase(names[i]) eq 'none') then continue

    x = solar_xy( 0, i ) & y = solar_xy( 1, i )

    if ( keyword_set( sxt ) ) then begin
      xyouts, x + 20, y + 70, names( i ), align = 0.5, charthick = 3, color = 255, charsize = 1
      xyouts, x + 20, y + 70, names( i ), align = 0.5, charthick = 1, color = 0, charsize = 1
    endif else begin
      xyouts, x + 20, y + 70, names( i ), align = 0.5, charthick = 3, color = 0, charsize = 1
      xyouts, x + 20, y + 70, names( i ), align = 0.5, charthick = 1, color = 255, charsize = 1
    endelse

  endfor

; Read plot from Z-buffer and write to file

  zb_plot = tvrd()

; Need to convert solar x and y to device coordinates for html imagemap

  dev_xy = convert_coord( solar_xy[ 0, * ], solar_xy[ 1, * ], /to_device )
  size_z = size( zb_plot, /dim )
  dev_xy[ 1, * ] = size_z[ 1 ] - dev_xy[ 1, * ] ; correct for indexing from top to bottom in jpeg
  dev_xy = strcompress( string( round( dev_xy ) ), /rem )

  set_plot, 'x'

; Write image and fits

  date_time = time2file(map.time,/seconds)

  image_png_file = instrument + '_' + filter + '_fd_' + date_time + '.png'
  image_png_thumb_file = instrument + '_' + filter + '_thumb_pre.png'
  image_fts_file = instrument + '_' + filter + '_fd_' + date_time + '.fts'
  image_static_png_file = instrument + '_' + filter + '_fd.png'

  help,zb_plot

; Write fulldisk pngs and fits to /data/yyyymmdd/[png,fits]

  if ( map.id ne 'NO DATA' ) then begin

    wr_png, output_path + '/data/' + date + '/pngs/' + instrument + '/' + image_png_file, zb_plot
    map2fits, unscaled_map, output_path + '/data/' + date + '/fits/' + instrument + '/' + image_fts_file
    gzip, output_path + '/data/' + date + '/fits/' + instrument + '/' + image_fts_file

   ;if ((instrument eq 'gsxi') or (full_instrument eq 'seit_00195') or (full_instrument eq 'seit_00284') or (full_instrument eq 'smdi_maglc') or (full_instrument eq 'smdi_igram') or (full_instrument eq 'bbso_halph')) then begin
      wr_png, output_path + '/data/' + date + '/pngs/thmb/' + image_png_thumb_file, zb_plot
      wr_png, output_path + '/data/latest_images/' + image_static_png_file, zb_plot
   ;endif

  endif

  ; Now overwrite the map coords instead of saving them
  ;map_coords_file = 'map_coords_' + instrument + '_' + filter + '_fd_' + date_time + '.txt'

  map_coords_file = instrument + '_' + filter + '_imagemap_' + date + '.txt'
  openw, lun, output_path + '/data/' + date + '/meta/' + map_coords_file, /get_lun

    for i=0,n_elements(names)-1 do begin
      if (strlowcase(names[i]) eq 'none') then continue
      printf, lun, dev_xy[ 0, i ] + ' ' + dev_xy[ 1, i ] + ' ' + names[i]
    endfor

 ; close, lun

  print, ' '
  print, 'Data written to <' + image_png_file + '>.'
  print, 'Data written to <' + image_fts_file + '>.'
  print, 'Data written to <' + map_coords_file + '>.'
  print, ' '

  ; write the map_structure
    if keyword_set(gong_maglc) then $
     map_struct = {scaled_map : map, unscaled_map : unscaled_map, scaled_db_map : dB_map, unscaled_db_map : unscaled_dB_map} $
    else $
       map_struct = {scaled_map : map, unscaled_map : unscaled_map} ;,dbmap gong stuff

    ;Crude IDL error handling.  uses a goto! (eek)
    error_handler:

    if (error_type ne '') then error_status = 1

end


